import Action from "./actions";
import { EventHandlerMap, OnOff } from "./events";
export default class AsyncIframe {
    /** Subscribe to events. */
    on: OnOff;
    /** Unsubcribe from events. */
    off: OnOff;
    /** Emit events. */
    private _emit;
    private readonly _iframeElement;
    private readonly _id;
    private readonly _origin;
    private _onMessageListener;
    constructor(source: string, container: Element, origin: string, eventHandlerMap?: Partial<EventHandlerMap>);
    /** Removes iframe from the DOM and unhooks all events. */
    destroy(): void;
    /** Resolves to the HTMLIFrameElement upon handshake completion. */
    readonly element: Promise<HTMLIFrameElement>;
    /**
     * Posts a message to the iframe content documents.
     * Resolves or rejects with a reply or acknowledgement from the iframe.
     */
    postMessage<RequestType = any, ResponseType = any>(message: GenericMessageRequest<RequestType>, iframeElement?: HTMLIFrameElement): Promise<ResponseType>;
    private _createIFrameElementAsync(source, container);
    private _createIframeElement();
    private _initiateHandshake(iframeElement);
    private _initiateEventProxy();
    private _onMessage(event);
    private _rebindIframeEventHandlers(iframeElement);
}
/** Takes a URL and returns its origin. */
export declare function getOrigin(url: string): string;
/** The signature of message requests. */
export interface GenericMessageRequest<T = any> {
    action: Action;
    payload?: T;
}
