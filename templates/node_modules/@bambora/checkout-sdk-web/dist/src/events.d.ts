/** All possible events that Checkout emits. */
export declare enum CheckoutEvent {
    /** A payment has been authorized. */
    Authorize = "authorize",
    /**
     * The Checkout session has been canceled.
     * Checkout requests for its modal to be closed.
     *
     * To avoid a redirect, reply immediately with the
     * `AcknowledgeCloseRequest` action.
     */
    Cancel = "cancel",
    /**
     * The Checkout session has been completed.
     * Checkout requests for its modal to be closed.
     *
     * To avoid a redirect, reply immediately with the
     * `AcknowledgeCloseRequest` action.
     */
    Close = "close",
    /** A payment type has been selected. */
    PaymentTypeSelection = "paymentTypeSelection",
    /** The payment card type has been determined. */
    CardTypeResolve = "cardTypeResolve",
}
export default CheckoutEvent;
/** The emitter factory function. Creates a new emitter. */
export declare const createEmitter: EmitterFactory;
export declare type EmitterFactory = (eventHandlerMap?: Partial<EventHandlerMap>) => Emitter;
export interface Emitter {
    on: OnOff;
    off: OnOff;
    emit: Emit;
}
export declare type SingleEventHandler = (event?: any) => void;
export declare type AllEventsHandler = (type: CheckoutEvent, event?: any) => void;
export declare type EventHandler = SingleEventHandler | AllEventsHandler;
export declare type OnOffSingle = (type: CheckoutEvent, handler: SingleEventHandler) => void;
export declare type OnOffAll = (type: "*", handler: AllEventsHandler) => void;
export declare type OnOff = OnOffSingle & OnOffAll;
export declare type Emit = (type: CheckoutEvent, event?: any) => void;
export declare type SingleEventHandlerMap = {
    [key in CheckoutEvent]: Array<SingleEventHandler>;
};
export interface AllEventsHandlerMap {
    "*": Array<AllEventsHandler>;
}
export declare type EventHandlerMap = SingleEventHandlerMap & AllEventsHandlerMap;
