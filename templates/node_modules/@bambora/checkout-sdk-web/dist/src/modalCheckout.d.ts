import { ModalCheckoutInstanceOptions } from "./options";
import AbstractIframeCheckout from "./abstractIframeCheckout";
/**
 * A class for creating a modal Checkout experience.
 * Creates an iframe containing Checkout and handles all communication.
 * Creates an overlay and handles showing and hiding of it.
 */
export default class ModalCheckout extends AbstractIframeCheckout<ModalCheckoutInstanceOptions> {
    /** The duration of animating the overlay in or out. */
    static readonly ANIMATION_DURATION: number;
    /** The defualt transition CSS value for the overlay animation. */
    static readonly DEFAULT_TRANSITION: string;
    private _isActive;
    /**
     * The element that initiated showing the modal.
     * We return focus to this element when hiding the modal
     * to improve accessibility.
     */
    private _initiatingElement;
    private _id;
    private _overlayContainer;
    private _backdrop;
    private _enableBodyScroll;
    constructor(sessionToken: string | null, options?: Partial<ModalCheckoutInstanceOptions>);
    /**
     * Removes the overlay and iframe from the DOM and unhooks all events.
     * If executed while the modal is displayed, body scrolling will be reenabled.
     */
    destroy(): void;
    /** Shows the modal overlay. Resolves upon animation finish. */
    show(event?: MouseEvent): Promise<void>;
    /** Hides the modal overlay. Resolves upon animation finish. */
    hide(target?: Element): Promise<void>;
    /** Is `true` when the modal is visible. */
    readonly isActive: boolean;
    private _getElementCoordinates(target?);
    private _getViewportDifference(coordinates);
    private _createOverlayContainer();
    private _createIframeContainer();
    private _createBackdrop();
    private _createFocusTrap();
}
/** All the CSS classes the modal uses. */
export declare enum Style {
    Backdrop = "bc-backdrop",
    IframeContainer = "bc-iframe-container",
    OverlayContainer = "bc-overlay-container",
    Leave = "bc-leave",
    LeaveActive = "bc-leave-active",
    Enter = "bc-enter",
    EnterActive = "bc-enter-active",
}
/** Delays execution asynchronously. Does not block execution. */
export declare function delay(duration: number): Promise<void>;
