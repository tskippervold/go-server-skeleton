import { EventHandlerMap } from "./events";
/** All possible Checkout user interfaces. */
export declare enum UI {
    Fullscreen = "fullscreen",
    Modal = "modal",
    Inline = "inline",
}
export declare const DEFAULT_COMMON_OPTIONS: Readonly<CommonCheckoutInstanceOptions>;
export declare const DEFAULT_REDIRECT_OPTIONS: Readonly<RedirectCheckoutInstanceOptions>;
export declare const DEFAULT_MODAL_OPTIONS: Readonly<ModalCheckoutInstanceOptions>;
export declare const DEFAULT_INLINE_OPTIONS: Readonly<InlineCheckoutInstanceOptions>;
/** Maps an options object to a client-side objects object. */
export declare function mapOptionsToClientSideOptions(options: CheckoutInstanceOptions): Partial<PaymentWindowClientSideOptions>;
/** Maps an options object to a server-side objects object. */
export declare function mapOptionsToServerSideOptions(options: CheckoutInstanceOptions): PaymentWindowServerSideOptions;
/** Converts a client-side options object to a base64 string. */
export declare function optionsToBase64(options: Partial<PaymentWindowClientSideOptions>): string;
/** Converts a server-side options object to a URL-friendly query string. */
export declare function optionsToQueryString(options: PaymentWindowServerSideOptions): string;
/** Options that are passed client-side only, via the URL `#` hash. */
export interface PaymentWindowClientSideOptions {
    /** Client-side style overrides. */
    styles: any;
    /** Client-side label overrides. */
    labels: {
        [key: string]: string;
    };
    /** SDK version. */
    version: string;
    /** Whether to present Checkout in demo mode (internal). */
    demo: boolean;
}
/** Options that are passed server-side only, via GET parameters. */
export interface PaymentWindowServerSideOptions {
    /** Which Checkout user interface to use for the session. */
    ui: UI;
    /** The language of Checkout for the session, i.e. `"en-US"`. */
    language: string;
}
/** Options that are common to all Checkout experiences. */
export interface CommonCheckoutInstanceOptions extends Partial<PaymentWindowClientSideOptions>, PaymentWindowServerSideOptions {
    /** The Checkout endpoint to use. */
    endpoint: string;
}
/** Options that are specific to inline Checkout experiences. */
export interface InlineCheckoutInstanceOptions extends CommonCheckoutInstanceOptions {
    /** The container to append the iframe to. */
    container: Element | null;
    /** Attach event listeners immediately during instantiation. */
    eventHandlerMap?: Partial<EventHandlerMap>;
}
/** Options that are specific to modal Checkout experiences. */
export interface ModalCheckoutInstanceOptions extends CommonCheckoutInstanceOptions {
    /**
     * Set a Content-Securty-Policy nonce property for the inline stylesheet
     * created by `ModalCheckout`.
     */
    cspNonce?: string;
    /** Attach event listeners immediately during instantiation. */
    eventHandlerMap?: Partial<EventHandlerMap>;
}
/** Options that are specific to redirect Checkout experiences. */
export declare type RedirectCheckoutInstanceOptions = CommonCheckoutInstanceOptions;
/** Options generic for Checkout experiences that uses an iframe. */
export declare type IframeCheckoutInstanceOptions = InlineCheckoutInstanceOptions | ModalCheckoutInstanceOptions;
/** Options generic for Checkout experiences. */
export declare type CheckoutInstanceOptions = RedirectCheckoutInstanceOptions | IframeCheckoutInstanceOptions;
